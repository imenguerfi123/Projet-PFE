Device Tree Compilation

1. Create a device tree source file  file.dtsi

2. install dtc compiler 

    sudo apt-get install device-tree-compiler


3.compile our source file into a dtbo blob

  sudo dtc -@ -O dtb -o file.dtbo -b O file.dts


The inverse compilation way is also permitted by recovering the source file from binary

   sudo -I dtb -O dts -o file.dts file.dtbo

4. Allowing device tree overlay to be loaded from boot process


Allowing device tree overlay to be loaded from boot process steps 
are simply moving the dtbo file into /boot/overlays and adding dtoverlay dt_file_name.


Manually adding device tree
To add your device tree manually without booting 
the Raspberry PI you can simply use the command  
         
             sudo dtoverlay file.dtbo


For help  : dtoverlay -h


****************
On Raspberry Pi, Device Tree usage is controlled from /boot/config.txt. By
default, the Raspberry Pi kernel boots with device tree enabled. You can
completely disable DT usage (for now) by adding:

    device_tree=

to your config.txt, which should cause your Pi to revert to the old way of
doing things after a reboot.

In /boot you will find a .dtb for each base platform.

Modules
=======

As well as describing the hardware, Device Tree also gives enough information
to allow suitable driver modules to be located and loaded, with the corollary
that unneeded modules are not loaded. As a result it should be possible to
remove lines from /etc/modules, and /etc/modprobe.d/raspi-blacklist.conf can
have its contents deleted (or commented out).

***************************************************************************************


Altera FPGAs support a method of loading the bitstream over what is
referred to as "passive serial".

The passive serial link is not technically SPI, and might require extra
circuits in order to play nicely with other SPI slaves on the same bus.

See https://www.altera.com/literature/hb/cyc/cyc_c51013.pdf

Required properties:
- compatible: Must be one of the following:
	"altr,fpga-passive-serial",
	"altr,fpga-arria10-passive-serial"
- reg: SPI chip select of the FPGA
- nconfig-gpios: config pin (referred to as nCONFIG in the manual)
- nstat-gpios: status pin (referred to as nSTATUS in the manual)

Optional properties:
- confd-gpios: confd pin (referred to as CONF_DONE in the manual)

Example:
	fpga: fpga@0 {
		compatible = "altr,fpga-passive-serial";
		spi-max-frequency = <20000000>;
		reg = <0>;
		nconfig-gpios = <&gpio4 9 GPIO_ACTIVE_LOW>;
		nstat-gpios = <&gpio4 11 GPIO_ACTIVE_LOW>;
		confd-gpios = <&gpio4 12 GPIO_ACTIVE_LOW>;
	};

*****************************************************************
Broadcom BCM2835 SPI0 controller

The BCM2835 contains two forms of SPI master controller, one known simply as
SPI0, and the other known as the "Universal SPI Master"; part of the
auxiliary block. This binding applies to the SPI0 controller.

Required properties:
- compatible: Should be "brcm,bcm2835-spi".
- reg: Should contain register location and length.
- interrupts: Should contain interrupt.
- clocks: The clock feeding the SPI controller.

Example:

spi@20204000 {
	compatible = "brcm,bcm2835-spi";
	reg = <0x7e204000 0x1000>;
	interrupts = <2 22>;
	clocks = <&clk_spi>;
	#address-cells = <1>;
	#size-cells = <0>;
};






















